package com.seecen.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.*;
import java.util.UUID;

@Controller
@RequestMapping("/file")
public class FileController  {
    @RequestMapping("/image.action")
    public void getImage(String fileName, HttpServletResponse response) throws UnsupportedEncodingException {
        File file = new File("D:/wenjian/" + fileName);
        if(!file.exists()) return;
        byte[] data = new byte[1024 * 1024];
        try(InputStream is = new FileInputStream(file);
            ServletOutputStream os = response.getOutputStream();) {
            // 告诉浏览器准备下载,并赋予下载文件的名字
            response.setHeader("Content-Disposition", "attachment;");
            // 告诉浏览器, 我不是响应页面, 而是响应一个二进制数据(流)
            response.setContentType("application/octet-stream");
            int len = 0;
            while((len = is.read(data)) != -1) {
                os.write(data, 0, len);
            }
        } catch (Exception e) {e.printStackTrace();}
    }

    @RequestMapping("/upload.action")
    @ResponseBody
    public ObjectNode upload(MultipartFile file, HttpServletRequest request) throws IOException{
        int index = file.getOriginalFilename().lastIndexOf(".");
        String suffix = file.getOriginalFilename().substring(index);
        String fileName = UUID.randomUUID().toString()+suffix;
        File distFile = new File("d:/wenjian/"+fileName);

        if (!distFile.exists()) distFile.createNewFile();
        file.transferTo(distFile);
        String url = request.getContextPath()+"/file/image.action?fileName="+fileName;
        ObjectMapper mapper = new ObjectMapper();

        ObjectNode objectNode1 = mapper.createObjectNode();
        ObjectNode objectNode2 = mapper.createObjectNode();
        objectNode1.put("code",0);
        objectNode2.put("src",url);
        //给父节点json加入子节点json
        objectNode1.set("data",objectNode2);
        return objectNode1;

    }
}
