package com.seecen.controller;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.seecen.domain.User;
import com.seecen.domain.UserBo;
import com.seecen.service.UserService;
import org.apache.commons.lang.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.ModelAndView;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.UUID;

/**
 * @Author 鞠志超
 * @Date 2019/10/25 14:50
 * @Description
 */
@Controller
@RequestMapping("/user")
public class Myself {
    @Autowired
    private UserService userService;

    @RequestMapping("/myself.action")
    public ModelAndView updateUser(User user, MultipartFile file) throws IOException {

        ModelAndView mv  = new ModelAndView("redirect:/static/Myself.jsp");
        if(StringUtils.isNotEmpty(file.getOriginalFilename())){
            File f = buildFile(file.getOriginalFilename());
            file.transferTo(f);
            user.setFacePath(f.getName());
        }
        System.out.println(user.toString());
        userService.updateUserdata(user);

        List<User> list = userService.findUser(user.getUserId());
        mv.addObject("user",list);
        return mv;
    }

    private File buildFile(String fileName) throws IOException {
        String fileUniqueName = UUID.randomUUID().toString().replaceAll("-","");
        fileUniqueName += fileName.substring(fileName.lastIndexOf("."));
        File file = new File("d:" + File.separator + "upload" + File.separator + fileUniqueName);
        file.createNewFile();
        return file;
    }

    @RequestMapping("/deleteUser.action")
    public void delUser(int userId){
        userService.delUser(userId);
    }

    @ResponseBody
    public PageInfo<User> findUserJ(UserBo userBo, @RequestParam(defaultValue = "1") int pageNum, @RequestParam(defaultValue = "10") int pageSize){
        PageHelper.startPage(pageNum,pageSize,true);
        List<User> findUserJ = userService.findUserJ(userBo);
        PageInfo pageInfo = new PageInfo(findUserJ);
        return pageInfo;
    }
}
